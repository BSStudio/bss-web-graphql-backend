services:
  graphql:
    build: .
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      DATABASE_CONNECTION_STRING: "postgresql://user:password@db:5432/bss"
      POSTGRAPHILE_ALLOW_EXPLAIN: "true"
      POSTGRAPHILE_GRAPHIQL: "true"
      POSTGRAPHILE_WATCH_PG: "true"
      POSTGRAPHILE_SHOW_ERROR_STACK: "true"
    depends_on:
      - backend
    healthcheck:
      test: "wget --tries=1 --no-verbose -qO- http://localhost:3000/actuator/health | grep -q UP"
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 3
  # once db is initialized, we can shut down the container
  # however it makes it easy to add data to the db
  backend:
    image: ghcr.io/bsstudio/bss-web-admin-backend:v2.4.7@sha256:320bb87939915ba58147f0f8ca83dfdc48082c3d96ab0737a71d7b447078f62b
    healthcheck:
      test: "wget --tries=1 --no-verbose -qO- http://localhost:8080/actuator/health | grep -q UP"
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - db
    environment:
      bss.file-api.url: "http://mock-file-api:8080"
      spring.security.oauth2.resourceserver.opaquetoken.introspection-uri: "http://mock-oidc:8080/o/introspect"
      spring.security.oauth2.resourceserver.opaquetoken.client-id: client-id
      spring.security.oauth2.resourceserver.opaquetoken.client-secret: client-secret
      spring.datasource.url: "jdbc:postgresql://db:5432/bss?currentSchema=private"
      spring.datasource.username: "user"
      spring.datasource.password: "password"
      spring.flyway.default-schema: "private"
      spring.flyway.schemas: "private,public"
  db:
    image: "postgres:16.3-alpine3.18@sha256:64e18e8fb3e9c9aac89ac590c5dd8306b862478404f76cd9b5f7720d012b4c47"
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_DB: "bss"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"
    healthcheck:
      test: "pg_isready -q -U postgres"
      start_period: 5s
      interval: 30s
      timeout: 5s
      retries: 3
